##################
# INITIALIZATION #
##################

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# Check for current platform, in case you
# need any platfrom-dependent settings.
PLATFORM='unkown'
UNAME_STR=`uname`
if [[ "$UNAME_STR" == 'Darwin' ]]; then
    PLATFORM='osx'
fi

# Set language. This also prevents some errors
# on Django, Mercurial.
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

# Set up colors.
export CLICOLOR=1
export LSDCOLORS=ExFxCxDxBxegedabagacad
export LSCOLORS=ExFxCxDxBxegedabagacad


########################
# PROMPT COMMAND (PS1) #
########################

ESC="\033"
BRIGHT=0
DULL=1
GREEN=";32m"
YELLOW=";33m"
BLUE=";34m"
MAGENTA=";35m"

# Based on:
# http://www.opinionatedprogrammer.com/2011/01/colorful-bash-prompt-reflecting-git-status/
function _git_prompt() {
    local git_status="`git status -unormal 2>&1`"
    if ! [[ "$git_status" =~ Not\ a\ git\ repo ]]; then
        # Determine status of revisions
        if [[ "$git_status" =~ nothing\ to\ commit ]]; then
            local ansi=$GREEN
        elif [[ "$git_status" =~ nothing\ added\ to\ commit\ but\ untracked\ files\ present ]]; then
            local ansi=$YELLOW
        else
            local ansi=$MAGENTA
        fi

        # Determine branch
        if [[ "$git_status" =~ On\ branch\ ([^[:space:]]+) ]]; then
            branch=${BASH_REMATCH[1]}
        else
            # Detached HEAD.  (branch=HEAD is a faster alternative.)
            branch="(`git describe --all --contains --abbrev=4 HEAD 2> /dev/null ||
                echo HEAD`)"
        fi

        # Determine remote URL and set .gitconfig username and email.
        # Alternatively, we could wrap cd like RVM does, but this works
        # for now.
        local git_remote="`git remote -v 2>&1`"
        if [[ "$git_remote" =~ github\.com  ]]; then
            local gitconfig="modocache@"
            export GIT_AUTHOR_NAME="modocache"
            export GIT_AUTHOR_EMAIL="modocache@gmail.com"
        else
            # Be sure to set these variables somewhere not in source control.
            local gitconfig="work@"
            export GIT_AUTHOR_NAME="$WORK_GIT_AUTHOR_NAME"
            export GIT_AUTHOR_EMAIL="$WORK_GIT_AUTHOR_EMAIL"
        fi
        export GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME"
        export GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL"

        local prompt="\[$ESC[$DULL$ansi\]($gitconfig$branch)\[$ESC[00m\] "
    fi

    PS1="${home}\[$ESC[$DULL$GREEN\]\u@\h\[$ESC[$DULL$BLUE\] \w $prompt\[$ESC[$DULL$BLUE\]"'(´･ω ･\`)'"\[$ESC[00m\] "
}

PROMPT_COMMAND=_git_prompt


########
# PATH #
########

# Add /usr/local/bin to PATH.
export PATH="/usr/local/bin:${PATH}"
export PATH="/usr/local/lib:${PATH}"


#######
# GIT #
#######

# Enable autocompletion for Git.
# Requires /git/contrib/completion/git-completion.bash to be location in home directory.
source ~/.git-completion.bash


##############
# POSTGRESQL #
##############

# PostgreSQL settings
# See: http://www.postgresql.org/docs/9.1/static/install-post.html
export LD_LIBRARY_PATH=/usr/local/pgsql/lib


##########
# PYTHON #
##########

# Set architecture flags to precent IOErrors in Python.
# See: http://justcramer.com/2011/07/20/python-and-os-x-lion/
export ARCHFLAGS='-arch i386 -arch x86_64'

# Fixes errors with tox
# http://groups.google.com/group/nltk-dev/browse_thread/thread/64fd41e0503e4c88
export MACOSX_DEPLOYMENT_TARGET=10.7

# Add brew-installed Python path to PATH
export PATH="/usr/local/share/python3:${PATH}"
export PATH="/usr/local/share/python:${PATH}"

# Enable gettext in Homebrew Cellar (needed for Django makemessages)
export PATH="/usr/local/Cellar/gettext/0.18.1.1/bin:${PATH}"

# virtualenvwrapper settings.
if [ `id -u` != '0' ]; then
    export VIRTUALENV_USE_DISTRIBUTE=1          # <-- Always use pip/distribute
    export WORKON_HOME=$HOME/.virtualenvs       # <-- Where all virtualenvs will be stored
    export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python
    . /Library/Frameworks/Python.framework/Versions/2.7/bin/virtualenvwrapper.sh
    export PIP_VIRTUALENV_BASE=$WORKON_HOME
    export PIP_RESPECT_VIRTUALENV=true
fi


########
# RUBY #
########

# Load RVM into a shell session *as a function*
[[ -s "${HOME}/.rvm/scripts/rvm" ]] && . "${HOME}/.rvm/scripts/rvm"


########
# NODE #
########

# Use NVM for Node.js
[[ -r ~/.nvm/nvm.sh ]] && . ~/.nvm/nvm.sh
[[ -r ~/.nvm/bash_completion ]] && . ~/.nvm/bash_completion

# Use rlwrap for Node REPL
alias node='env NODE_NO_READLINE=1 rlwrap -p Green -S "node >>> " node'


###################################
# BASH HISTORY AND OTHER SETTINGS #
###################################

# Ignore duplicates (ignoredups) and commands
# that begin with a space (ignorespace).
export HISTCONTROL=ignoreboth

# Append to the history file, don't overwrite it.
shopt -s histappend

# For setting history length see HISTSIZE and HISTFILESIZE in bash(1).

# Check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# Always useful, so defined here.
alias grep='grep --colour=auto'
alias ls="ls -laF"
alias ps="ps aux"

# In the same vein, keep environment variables defined
# in a separate file.
if [ -f ~/.bash_env_vars ]; then
    . ~/.bash_env_vars
fi

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
