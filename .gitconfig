# Git configuration
# =================
#
# To use this configuration, I symlink it to my home directory:
# ```
# ln -s (pwd)/.gitconfig  ~/.gitconfig
# ```
[user]
  name = Brian Gesiak
  email = brian@modocache.io

[core]
  # In cases where Git opens a text editor (such as for an interactive rebase
  # with `git rebase -i`), have it open Vim.
  editor = vim
  # To ignore certain files across this entire host, I create a file at this
  # path and fill it with paths (relative to a Git repository root) to ignore.
  # To get started, I copy the `.gitignore` from this repository:
  # ```
  # mkdir -p ~/.config/git; and cp (pwd)/.gitignore ~/.config/git/
  # ```
  excludesfile = ~/.config/git/.gitignore

[grep]
  # Run every `git grep` as if `-n` or `--line-number` were specified (i.e. the
  # line number of each match appears after the filename).
  lineNumber = true

[bash]
  # The Git repository contains a bash and zsh prompt shellscript that displays
  # repository information in a user's "PS1" ("prompt string/statement one"):
  # https://github.com/git/git/blob/v2.39.2/contrib/completion/git-prompt.sh
  #
  # This script makes use of Git config values that are prefixed with `bash`:
  # `bash.showDirtyState`, `bash.showUntrackedFiles`, and so on, in order to
  # allow users to configure the prompt behavior per-repository.
  #
  # The fish shell's built-in function `fish_git_prompt` also references these
  # configuration values:
  # https://github.com/fish-shell/fish-shell/blob/3.6.0/doc_src/cmds/fish_git_prompt.rst
  #
  # The following are enabled by default, but use local configs and conditional
  # includes (see below) to disable them per-repository.
  showInformativeStatus = true
  showDirtyState = true
  showUntrackedFiles = true

[include]
  # Git supports including other files.
  # For any host-specific settings, I create a file at this path and fill it
  # with settings like the ones in this file. Settings may also be overridden,
  # so I can choose to use a different `user.email` setting on each machine,
  # for example.
  path = ~/.config/git/local.gitconfig

[includeIf "gitdir:llvm-project/"]
  # Git also supports conditional includes: the following file is only read
  # within a repository named `llvm-project`.
  path = "~/.config/git/llvm-project.gitconfig"
