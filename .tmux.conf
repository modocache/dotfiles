# tmux
# ====
#
# tmux is a terminal multiplexer. It's useful for:
#
# 1. Splitting a terminal window into multiple panes.
#
# Applications like iTerm can also accomplish this for terminal sessions on a
# host machine running macOS, but I can install tmux on any machine, including
# ones I SSH into.
#
# 2. Maintaining a work session on a remote machine, that persists even when
#    I lost my connection.
#
# tmux "sessions" are persistent on the host machine. If I lose my SSH
# connection to a remote machine running tmux, I can re-establish the
# connection later, and then "reattach" to my session. Any commands I was
# running will have kept running, and any panes I had set up will remain in
# their place.
#
# To use the options set in this configuration file, symlink it to
# `~/.tmux.conf`, like so:
#
# ```fish
# ln -s (pwd)/.tmux.conf ~/.tmux.conf
# ```
#
# You can reload a configuration file from within tmux at any time, by running
# `tmux source ~/.tmux.conf` on the command line.
#
# Starting (or re-attaching to) a tmux session
# --------------------------------------------
#
# When I want to begin working, either on my host machine or after SSH'ing into
# a remote machine, I start a tmux session.
#
# `tmux ls` lists all sessions managed by the tmux server running on the
# machine. (This is an alias for `tmux list-sessions`.)
# - If I've already begun a session, I attach to it using
#   `tmux attach`. (`tmux attach` is an alias for `tmux attach-session`.)
# - If no sessions are running, the command outputs "no server running."
#   I start a new one using `tmux`.
#
# Once within a tmux session, most tmux commands are entered by first entering
# the prefix key, which (both by default, and in my configuration) is
# `Ctrl-b` (denoted as `C-b` in `man tmux`).
#
# For any command with a shortcut, there is also a longform equivalent, which
# can be entered using `C-b :`, and then typing out the command and its
# arguments.
#
# From within a tmux session, `C-b d` detaches the client from the session
# (a shortcut for `detach-client` or `detach`). Note that this does not kill
# the tmux session, so any commands that are running stay running. When I
# finish working on a remote machine via SSH, I detach from the tmux session,
# and then close the SSH connection.
#
# Windows and panes
# -----------------
#
# Once working in a tmux session, I organize my work in terms of windows and
# panes.
#
# A window occupies the entire screen -- they're like "tabs" in a Terminal
# application like macOS Terminal.app or iTerm.app. The list of windows appears
# at the bottom.
# - I typically rename my window to keep track of the work I'm doing within
#   that window, by entering `C-b ,` (a shortcut for
#   `rename-window <new-name>`).
# - For separate workstreams, I create new windows, using `C-b c` (a shortcut
#   for `new-window`).
# - I swtich between windows using `C-b n` (a shortcut for `next-window`, or
#   `next`), `C-b p` (`previous-window`, or `prev`), or `C-b <number>` to
#   switch to the window with that number (`select-window -t <number>`).
#
# A single window can be split into multiple panes.
# - `C-b "` splits the pane into a top and bottom pane. My default workflow is
#   to use the top pane to keep an editor open (Vim), and a bottom pane for
#   running terminal commands.
# - `C-b %` splits the pane into a left and right pane.
# - Panes may be resized using commands -- `C-b C-Up`, or any of the arrow keys,
#   resize a pane by one row or column (holding `Ctrl` and repeatedly pressing
#   `Up` repeatedly resizes, so it's not as inconvenient as it sounds). The
#   `resize-pane` also exists and is very complicated.
# - Personally I almost always resize using the mouse. Enabling the `mouse`
#   option in tmux allows a mouse (or trackpad) click to select windows or
#   panes, and a click and drag to resize pane bondaries. It also allows for
#   scrolling through a pane's output.

set-option -g mouse on

# Shortcuts exist to kill the current pane and window, but I typically use
# `Ctrl-d` or `exit` to quit the pseudo terminal sessions being managed as part
# of the tmux session. Quitting the terminals running in a pane automatically
# closes the pane, and when all terminals running in a window are exited, the
# window is closed.
#
# Options and bindings
# --------------------
#
# tmux can be configured using the `set-option` command (or the shorter alias
# `set`). `set-option -g` sets an option for the global session (as opposed to
# just the current pane `-p` or window `-w`), and it's what I use exclusively in
# this configuration file. The session's current value for an option can be
# displayed with `show-option -A <option>`.
#
# tmux also allows key combinations to be bound to commands, using the
# `bind-key` (alias `bind`) command. By default, `bind-key <key> <command>`
# binds a key in the "prefix" key table, meaning that `C-b <key>` activates the
# bound command. Below, however, I use `bind-key -n` in order to bind
# `C-Up` (no `C-b` prefix) and the other arrow keys to the `select-pane`
# command, since I find this to be a way more convenient method of switching
# panes:

bind-key \
  -N "Select the pane above the active pane (equivalent to C-b Up)" \
  -n C-Up select-pane -U
bind-key \
  -N "Select the pane below the active pane (equivalent to C-b Down)" \
  -n C-Down select-pane -D
bind-key \
  -N "Select the pane to the left of the active pane (equivalent to C-b Left)" \
  -n C-Left select-pane -L
bind-key \
  -N "Select the pane to the right of the active pane (equivalent to C-b Right)" \
  -n C-Right select-pane -R

# A list of all tmux key bindings, plus a note explaining what they do, can be
# printed using the tmux `list-keys -N` command.
#
# Note, however, that when using macOS Terminal.app, `C-Up` and `C-Down` do not
# send the byte sequence necessary for these bindings to work. I had to navigate
# to Terminal.app `Settings > Profiles > Keyboard`, click `+`, and add:
# 1. A binding for C-Up.
#   - Key: ⬆ Cursor Up
#   - Modifier: ^ Control
#   - Action: Send Text
#   - Text: \033[1;5A
# 2. A binding for C-Down.
#   - Key: ⬇ Cursor Down
#   - Modifier: ^ Control
#   - Action: Send Text
#   - Text: \033[1;5B
#
# I also had to remove any macOS system-wide shortcuts for C-Up or C-Down, which
# can be found in `System Settings > Keyboard > Keyboard Shortcuts...`.
#
# Selecting and copying text
# --------------------------
#
# One of tmux's (very few) downsides is that it behaves "unintuitively" when
# selecting and copying text, because it maintains its own paste buffer,
# separate from the host machine's pasteboard (just as vi/Vim does). In general,
# when using macOS Terminal.app, and when copying a single line, I hold down the
# `fn` key and click and drag my mouse to select text, which I can copy to the
# macOS pasteboard with Ctrl-C.
#
# However, this works poorly with text over multiple lines. To use the tmux
# copy and paste buffer:
#
# 1. I enter copy mode, which is used to copy text or scroll back through pseudo
#    terminal output. This can be done using the shortcut `C-b [`, or by
#    scrolling back with the mouse or trackpad. (This is the equivalent of the
#    `copy-mode` command.)
# 2. From within copy mode, I use vi-like/Vim-like key bindings to navigate,
#    search for, and highlight text. For example:
#   1. `/` searches forward for text, `?` searches backward. `n` jumps to the
#      next match, `N` jumps to the previous one.
#   2. `gg` jumps to the top of the buffer, `G` jumps to the bottom.
#   3. `v` enters a "visual mode" for a single character (that is, it "selects"
#      or "highlights" a character), `V` does so for an entire line.
#   4. `q` exits copy mode.
# 3. Once I've highlighted text I wish to copy, `Enter` copies into the tmux
#    buffer, and exits copy mode.
# 4. To paste what's in the latest buffer, I use the shortcut `C-b ]`.
#
# By default, tmux uses Emacs-like key bindings, so in this configuration I
# change that default to vi-like/Vim-like, and set some options I prefer:

set-option -g mode-keys vi
# - Don't wrap around the end of the pane's content when searching.
set-option -g wrap-search off

# (Note that tmux also uses vi/Vim mode keys if the `$VISUAL` or `$EDITOR`
# environment variables are set, and contain the string "vi".)
#
# In addition: when using vi/Vim mode keys, tmux maps `Enter` to its
# `copy-selection-and-cancel` command. I'm used to using `y` in Vim, so I bind
# that to `copy-selection-no-clear`.
# - `bind-keys -T <key-table>` is used to bind keys for a specific table. In
#   this case we're binding to table "copy-mode-vi", which is used for vi/Vim
#   mode keys. (We use `-n` above, which is the equivalent to `-T root`.)
# - `man tmux` explains that "commands are sent to copy mode using the `-X` flag
#   to the `send-keys` command, which explains why the command syntax below is
#   different from our use of `bind-key` earlier in this configuration file.

bind-key \
  -N "Copy (but don't clear) the selection" \
  -T copy-mode-vi y send-keys -X copy-selection-no-clear

# In addition to the above, clicking and dragging with the mouse or trackpad
# while in copy mode also highlights and copies text. It can be pretty
# temperamental, especially when attempting to scroll back while copying, so the
# keyboard approach is the way to go when precision is required.
#
# Also worth noting: tmux maintains multiple buffers (just as vi/Vim does).
# `C-b =` brings up an interactive prompt to choose which one to paste.
#
# Appearance: styles and formats
# ------------------------------
#
# tmux allows for its appearance to be customized. It supports a variety of
# colors and styles, which can either be specified using words like "green" or
# "default", using a 256-color palette ("colour0" through "colour255"), or with
# RGB hexadecimal values (`#ff0000`).
#
# This configuration sets the following options:
# - To use the full 256-color spectrum, tmux must set the correct `TERM`
#   environment variable. This value uses 256 colors.
set-option -g default-terminal "tmux-256color"
# - Display both arrows and border indicators.
set-option -g pane-border-indicators "both"
# - Display a single line as a pane border.
set-option -g pane-border-lines "single"
# - Display the pane status at the bottom of the pane.
set-option -g pane-border-status "bottom"
# - Display a status bar with a single row.
set-option -g status on
# - Display that status bar at the bottom of the window.
set-option -g status-position "bottom"
# - Set the format string used by the left side of the status bar.
#   - This setting makes use of several variables defined by tmux:
#     `session_name` and `pane_mode` (a string value of the mode the pane is in,
#     or an empty string if the pane is not in any mode).
#   - Variable expressions are evaluated when they are enclosed by `#{ }`.
#   - Within variable expressions `#{}`, conditionals can be used. These take
#     the form `?<cond-expr>,<true-expr>,<false-expr>`. Within the true and
#     false expressions, `,` and `}` must be escaped as `#,` and `#}`.
#   - String comparisons can be performed using a syntax
#     `#{==:${<expr>},<string>}`. The `==` may be one of several other
#     operators.
set-option -g status-left \
  "[#{session_name}] #{?#{==:#{pane_mode},copy-mode},:COPY ,}→ "
# - Set the maximum length of the left side of the status bar.
set-option -g status-left-length 20
# - Set the window status bar style.
set-option -g status-style \
  "#{?#{==:#{pane_mode},copy-mode},\
    fg=#000000#,bg=#ffafaf,\
    fg=#000000#,bg=#00d7af}"
# - Set the currently active window's style, as displayed in the status line.
set-option -g window-status-current-style \
  "#{?#{==:#{pane_mode},copy-mode},\
    bg=#ffd7d7,\
    bg=#5fffaf}"
# - Set the last active window's style, as displayed in the status line.
set-option -g window-status-style "bg=default"
# - Set inactive windows' styles, as displayed in the status line.
set-option -g window-status-style "bg=default"
# - Set the style of the status bar when entering a tmux command.
set-option -g message-style "fg=#000000,bg=#ffaf5f"
# - Set the active pane border style.
set-option -g pane-active-border-style "fg=#00af87,bg=default"
# - Set inactive panes' border style.
set-option -g pane-border-style "fg=#767676,bg=default"
# - Set the color of the cursor.
set-option -g cursor-colour "default"
# - Set the style of the cursor ("block", "blinking-block", "underline", etc.).
set-option -g cursor-style "block"
# - Set the style of matches when searching for text in copy mode.
set-option -g copy-mode-match-style "fg=#000000,bg=#5fd7ff"
# - Set the style of the current match when searching for text in copy mode.
set-option -g copy-mode-current-match-style "fg=#000000,bg=#ff8700"
